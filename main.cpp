#include "mbed.h"
#include "rtos.h"
#include "EthernetInterface.h"
#include "ExperimentServer.h"
#include "QEI.h"
#include "BezierCurve.h"
#include "MotorShield.h"
#include "HardwareSetup.h"
#include <vector>
#include <string>
#include <fstream>  // For file handling
#include <sstream>  // For string stream processing



Serial pc(USBTX, USBRX);    // USB Serial Terminal

#define BEZIER_ORDER_FOOT 9
#define NUM_Joint_Points 32

#define NUM_INPUTS (15 + 4*(BEZIER_ORDER_FOOT+1))

#define NUM_OUTPUTS 38
#define PULSE_TO_RAD (2.0f*3.14159f / 1200.0f)




// Initializations
ExperimentServer server;
Timer t;
QEI encoderA(PE_9,PE_11, NC, 1200, QEI::X4_ENCODING);
QEI encoderB(PA_5, PB_3, NC, 1200, QEI::X4_ENCODING);
QEI encoderC(PC_6, PC_7, NC, 1200, QEI::X4_ENCODING);
QEI encoderD(PD_12, PD_13, NC, 1200, QEI::X4_ENCODING);

MotorShield motorShield(24000);
Ticker currentLoop;

// Rotary encoder variables
int position = 0;
const float pulses_per_revolution = 1200.0;
const float degrees_per_pulse = 360.0f / pulses_per_revolution;

// Motor variables
float current1, current2, current3, current4;
float prev_current_des1 = 0;
float prev_current_des2 = 0;
float prev_current_des3 = 0;
float prev_current_des4 = 0;
float current_des1 = 0, current_des2 = 0, current_des3 = 0, current_des4 = 0;
float current_int1 = 0, current_int2 = 0, current_int3 = 0, current_int4 = 0;
float angle1, angle2, angle3, angle4;
float velocity1, velocity2, velocity3, velocity4;
float duty_cycle1, duty_cycle2, duty_cycle3, duty_cycle4;
float angle1_init, angle2_init, angle3_init, angle4_init;

// Fixed kinematic parameters
const float l_OA = .011;
const float l_OB = .042;
const float l_AC = .096;
const float l_DE = .091;

// Timing parameters
float current_control_period_us = 200.0f;
float impedance_control_period_us = 1000.0f;
float start_period, traj_period, end_period;
float exper_period, front_phase, rear_phase;

// Control parameters
float current_Kp = 10.0f;
float current_Ki = 0.4f;
float current_int_max = 3.0f;
float duty_max;
float K_xx, K_yy, K_xy, D_xx, D_yy, D_xy;

// Model parameters
float supply_voltage = 12;
float R = 2.0f;
float k_t = 0.18f;
float nu = 0.0005f;

float spinalangle=0.0;

// Rotary Encoder Setup
DigitalIn RotaryencoderA(PG_0);  
DigitalIn RotaryencoderB(PG_1);//  
// Rotary encoder interrupt functions
InterruptIn interruptA(PG_0);
InterruptIn interruptB(PG_1);


#define SIZE 600  // Define array size
// Define arrays for each column
float joint1_imit[SIZE] = {
   0.427260823,0.447199792,0.465540384,0.48449046,0.505960089,0.531180732,0.560598517,0.594003732,0.630784473,0.670203585,0.711644743,0.754756251,0.799481117,0.84601838,0.894742714,0.946110419,1.000568805,1.058467805,1.119986289,1.154704898,1.187766304,1.214287624,1.232357716,1.241438794,1.241305003,1.232416231,1.216099749,1.193939073,1.16758699,1.138530428,1.108029039,1.077070693,1.046380473,1.016465929,0.987648441,0.960093235,0.933835587,0.908803737,0.884839054,0.861712379,0.839138716,0.816786461,0.794292758,0.771281626,0.747382196,0.722245739,0.69556138,0.667068479,0.636679088,0.608473037,0.58414496,0.565278933,0.5542211,0.553545732,0.563691304,0.581704266,0.603387257,0.6248744,0.643088443,0.656175424,0.66405119,0.668248299,0.671057846,0.674591812,0.68024037,0.68855091,0.699413762,0.712419194,0.72723694,0.743889424,0.762866764,0.785090118,0.811765822,0.844152236,0.883355855,0.930215099,0.985237384,1.048226613,1.112862298,1.150400172,1.180173599,1.203398691,1.222677729,1.237666873,1.248483581,1.25560871,1.259520969,1.2606351,1.259257703,1.255569308,1.249615829,1.241304174,1.2304361,1.216764387,1.200036509,1.180030342,1.156578473,1.129583704,1.099026095,1.064961214,1.027508241,0.986834708,0.943142731,0.89666044,0.847636295,0.796337071,0.743047325,0.688066647,0.631884681,0.579573972,0.531760786,0.489529486,0.456413074,0.435781745,0.428194706,0.430990488,0.440123559,0.451179672,0.460731871,0.466664912,0.468373547,0.466947133,0.464478996,0.463151909,0.46461233,0.46973078,0.478686362,0.491239433,0.507036533,0.52585457,0.547723785,0.572916117,0.601862857,0.635073775,0.67303606,0.716152668,0.764707012,0.818810877,0.875181206,0.90423407,0.931262225,0.962181226,0.994899398,1.02907,1.063742351,1.09645687,1.124431827,1.145824312,1.159996157,1.167025736,1.167085727,1.160427448,1.147369436,1.128303896,1.103691093,1.074051604,1.039953438,1.001996539,0.960792721,0.916943074,0.871015981,0.823526992,0.774929112,0.725612896,0.67590994,0.62609932,0.57641517,0.527051259,0.478298377,0.434757483,0.397237789,0.367195237,0.348143676,0.342466351,0.349987019,0.368033833,0.392494722,0.418793158,0.443193642,0.463878837,0.480748554,0.49480262,0.507781182,0.521614038,0.537879508,0.557474244,0.580563681,0.606758635,0.635399211,0.665840166,0.697681831,0.730865542,0.765642826,0.80248787,0.841999923,0.884792213,0.931400943,0.982224956,1.037472707,1.067282306,1.098031559,1.125997862,1.148735464,1.164844746,1.17367038,1.175147784,1.169641075,1.158238557,1.142228108,1.122895565,1.101337893,1.078420318,1.054787968,1.030901332,1.007061873,0.983436201,0.960079311,0.936956486,0.913962891,0.890938785,0.867682308,0.843956087,0.819499731,0.794045515,0.767333442,0.739125491,0.709218641,0.677454106,0.6438424,0.612611525,0.585382438,0.56373945,0.550173082,0.54734677,0.555425449,0.571523976,0.59178405,0.612374547,0.630251765,0.643533972,0.65194982,0.656843532,0.660410074,0.664774608,0.671413375,0.680981247,0.693452348,0.708448995,0.725607389,0.744854951,0.766542365,0.791425555,0.820547637,0.85502433,0.895848435,0.943780495,0.999277246,1.062429032,1.129199008,1.164540737,1.190164671,1.211179855,1.229576024,1.244531578,1.255789686,1.263452528,1.267741485,1.268905253,1.267159825,1.262644999,1.25540826,1.245389261,1.232446441,1.216408614,1.19711343,1.174435426,1.148304392,1.118716034,1.085734096,1.049484502,1.010141374,0.967910281,0.923014981,0.875691503,0.826184908,0.774749419,0.721649409,0.667157865,0.611708917,0.560272032,0.51346589,0.472410882,0.440638723,0.421499182,0.415497244,0.419857153,0.43042291,0.44272135,0.453329229,0.460184673,0.462739359,0.462115025,0.46041223,0.459803896,0.461916758,0.467596497,0.4769931,0.489832671,0.505723387,0.524405275,0.545873087,0.570370279,0.59831591,0.63022528,0.666612896,0.707925672,0.754500375,0.80651027,0.860803232,0.888413427,0.914369649,0.943814501,0.975219672,1.00813671,1.042017261,1.074648766,1.103123848,1.125390059,1.140586672,1.148747163,1.15008055,1.144852728,1.133387205,1.116073738,1.093362989,1.065757826,1.033800532,0.998058745,0.959107921,0.917511825,0.873803063,0.828465664,0.781926519,0.734555888,0.686670184,0.638537707,0.590385602,0.542403746,0.494900953,0.452528119,0.416169486,0.387282779,0.369334151,0.364587485,0.372753806,0.391181541,0.415887956,0.442442629,0.467224087,0.488467779,0.506141544,0.521258625,0.535471915,0.550612858,0.568192367,0.589078324,0.613436136,0.640893617,0.670816348,0.702589244,0.735836651,0.770536042,0.806989717,0.845713693,0.887321973,0.932415936,0.981498487,1.03491292,1.092795011,1.124396205,1.155236064,1.180638131,1.198876386,1.209226183,1.211578039,1.206531405,1.195056136,1.178398655,1.157981008,1.135053957,1.110653235,1.085565067,1.060339934,1.035338911,1.010764673,0.986691224,0.963089513,0.939849697,0.916800561,0.893724399,0.87036942,0.846457176,0.821694493,0.795787759,0.768459134,0.739460809,0.708587924,0.675687922,0.64076557,0.60803025,0.579030016,0.555300789,0.539417226,0.534588261,0.54104911,0.555530262,0.574033303,0.592694246,0.608345612,0.619040777,0.624655228,0.626709769,0.627495872,0.629137195,0.633053036,0.639836528,0.649436064,0.661498646,0.675726614,0.692130404,0.711134507,0.733557543,0.760462018,0.792939992,0.831958178,0.878264208,0.932320508,0.994159063,1.057244361,1.094145213,1.123202068,1.151042386,1.178831461,1.204587995,1.227013703,1.245589767,1.260150245,1.270648152,1.277086751,1.279467613,1.27776678,1.271908102,1.261778911,1.247272814,1.228321911,1.204922201,1.177148995,1.145163055,1.109205628,1.069585122,1.026652916,0.980781016,0.932345215,0.881712806,0.829237218,0.775256968,0.720096603,0.664067352,0.607680636,0.556096286,0.509887286,0.470141653,0.440484823,0.423518386,0.419255303,0.425204343,0.437638368,0.452386191,0.466046193,0.477020742,0.485070484,0.49088149,0.495992391,0.50220343,0.511010953,0.523287703,0.539251069,0.558647417,0.581029175,0.606009985,0.633444833,0.663472786,0.696444408,0.732819037,0.773063825,0.817575001,0.866627356,0.920334971,0.978623322,1.010464312,1.044843597,1.078925793,1.109493375,1.134539267,1.152756783,1.163475224,1.166521746,1.162086377,1.15113927,1.135117905,1.115046204,1.091787751,1.066047858,1.038405841,1.009324226,0.979162655,0.948190565,0.916600076,0.884518266,0.85201587,0.819114043,0.785790475,0.751983527,0.717603728,0.682547691,0.646711268,0.609999229,0.572333613,0.53370344,0.497987922,0.466514137,0.441020467,0.424476957,0.420477258,0.429213306,0.446861777,0.468784392,0.490567531,0.508677343,0.521081948,0.527805774,0.53058561,0.531893663,0.533970513,0.538294365,0.545471375,0.555421396,0.567709228,0.581883353,0.597742379,0.615468143,0.635614602,0.659019881,0.686661524,0.719520408,0.758480528,0.804231208,0.85719048,0.910993596,0.942420189,0.972676489,1.006073044,1.042241016,1.079850838,1.116681509,1.150214685,1.178664556,1.201334619,1.218259182,1.229517156,1.23521898,1.235472385,1.230380962,1.220065705,1.204680738,1.184427519,1.159563331,1.13040538,1.097324736,1.060731616,1.021054621,0.978722013,0.934149184,0.887728347,0.83982267,0.790765681,0.740862647,0.690392232,0.639936776,0.595079269,0.556601599,0.525524764,0.505406928,0.498093902,0.502982945,0.516690136,0.534881162,0.554029001,0.572055401,0.588385762
   };

float joint2_imit[SIZE] = {
    -1.668347242,-1.68112029,-1.690897514,-1.70012788,-1.710177367,-1.721350166,-1.733122935,-1.744491166,-1.754333207,-1.761707759,-1.766025831,-1.767090963,-1.76503832,-1.760214816,-1.753041593,-1.743888803,-1.732980762,-1.720346094,-1.705813003,-1.73842476,-1.770865877,-1.801331769,-1.828750301,-1.852752216,-1.873129116,-1.889932738,-1.902207021,-1.909220901,-1.911558707,-1.910098378,-1.905732862,-1.899243061,-1.891301424,-1.882503276,-1.873331932,-1.86413724,-1.855131541,-1.84639972,-1.837918345,-1.829576023,-1.821197452,-1.812551488,-1.803376637,-1.793399984,-1.782347719,-1.769947997,-1.755938651,-1.740068629,-1.721248005,-1.687065396,-1.653285217,-1.643792926,-1.661092101,-1.700001547,-1.750987475,-1.803650338,-1.849740053,-1.884724756,-1.907699408,-1.920261937,-1.925247422,-1.925573319,-1.923492788,-1.92033493,-1.916576525,-1.91208655,-1.906436842,-1.899192074,-1.890112684,-1.879243037,-1.866895728,-1.853566028,-1.839814075,-1.82615291,-1.812951708,-1.800346435,-1.788176877,-1.776105804,-1.771024394,-1.808936425,-1.843195166,-1.873705552,-1.903336113,-1.931560483,-1.957297524,-1.980154168,-2.000337955,-2.018007154,-2.03319646,-2.045889456,-2.056092091,-2.063797988,-2.069008079,-2.071745925,-2.07200522,-2.06972245,-2.064771299,-2.05698158,-2.04616508,-2.032145025,-2.0147762,-1.993966072,-1.969688379,-1.941991058,-1.91097991,-1.876803932,-1.839639768,-1.799686038,-1.75614101,-1.697669178,-1.639915158,-1.606350514,-1.599877872,-1.616173162,-1.646772109,-1.68205429,-1.713803583,-1.736938032,-1.750003002,-1.754139253,-1.751703998,-1.745265433,-1.736910088,-1.727985488,-1.719133215,-1.710453333,-1.701711356,-1.692539195,-1.682596685,-1.671670221,-1.659707256,-1.646805356,-1.633171548,-1.619058376,-1.604698695,-1.590237172,-1.575668533,-1.560804817,-1.549116037,-1.575888751,-1.601034237,-1.629937648,-1.662454868,-1.698598246,-1.737876948,-1.778593781,-1.818708263,-1.856488559,-1.889661497,-1.916841809,-1.938008117,-1.953397682,-1.963280467,-1.967948352,-1.96768132,-1.962738278,-1.953366027,-1.93981813,-1.92236806,-1.901316434,-1.876991182,-1.849733384,-1.819894395,-1.787835327,-1.753906761,-1.718434949,-1.68171883,-1.644017453,-1.604679925,-1.55142799,-1.499053626,-1.471522571,-1.472714266,-1.499327798,-1.543236741,-1.594343505,-1.643258501,-1.683450105,-1.712259187,-1.730574102,-1.741290918,-1.74768428,-1.752437116,-1.757189956,-1.762493574,-1.768033758,-1.772985549,-1.776381609,-1.777410646,-1.775594111,-1.770825058,-1.763305205,-1.753432045,-1.741674931,-1.728462217,-1.714101296,-1.698730833,-1.682298997,-1.664572697,-1.69362805,-1.722820337,-1.752190293,-1.780226759,-1.806078632,-1.829302082,-1.849728562,-1.867372234,-1.881389653,-1.890991231,-1.896588903,-1.898964892,-1.89882523,-1.8967548,-1.89325681,-1.888729832,-1.88345762,-1.877610491,-1.87125675,-1.864380439,-1.856898455,-1.848680536,-1.839552744,-1.82931942,-1.817780963,-1.804740687,-1.790008233,-1.773403442,-1.754755499,-1.733030605,-1.695864507,-1.659085881,-1.646608573,-1.660995593,-1.697165963,-1.745800062,-1.796627417,-1.841336992,-1.87526752,-1.897496252,-1.909681164,-1.914683576,-1.915413251,-1.914076646,-1.911926281,-1.909355349,-1.906162597,-1.901871356,-1.896017068,-1.888342474,-1.878876568,-1.867910047,-1.855904608,-1.843371462,-1.830764747,-1.818395469,-1.806355353,-1.794469199,-1.782293676,-1.774402651,-1.811702696,-1.844238695,-1.874186613,-1.904287447,-1.933132757,-1.959430319,-1.982957233,-2.003778427,-2.02190968,-2.0373039,-2.049919155,-2.05976766,-2.0668623,-2.071224445,-2.072900236,-2.071911372,-2.068222131,-2.061737435,-2.052327016,-2.03985061,-2.024185626,-2.005245955,-1.982995063,-1.957454264,-1.928709779,-1.896894597,-1.862174765,-1.824736517,-1.784777759,-1.741579443,-1.683694605,-1.626546519,-1.593598196,-1.587811246,-1.604905847,-1.636411505,-1.672678553,-1.70543027,-1.729508255,-1.743397604,-1.74820989,-1.746299841,-1.740255693,-1.732200028,-1.723519137,-1.714881405,-1.706392071,-1.697798762,-1.688698496,-1.678709088,-1.667577636,-1.655224468,-1.641737905,-1.627334644,-1.612294608,-1.59689092,-1.581317849,-1.565625992,-1.54968507,-1.537008582,-1.562343933,-1.58610664,-1.613303578,-1.644384749,-1.679122276,-1.717306518,-1.757404985,-1.797259656,-1.835292926,-1.869301117,-1.897573106,-1.919851064,-1.936358227,-1.947390976,-1.953268574,-1.95429019,-1.95072748,-1.942833733,-1.930863304,-1.915084241,-1.89578529,-1.873275067,-1.84787153,-1.819899171,-1.78969177,-1.757573848,-1.723848971,-1.688796506,-1.652660615,-1.614689292,-1.562600793,-1.511402964,-1.485128193,-1.487590968,-1.51539617,-1.560316891,-1.612208817,-1.661705737,-1.702363846,-1.731643544,-1.750553543,-1.762119093,-1.769696969,-1.775955348,-1.782441617,-1.789566242,-1.796869622,-1.803416699,-1.808190048,-1.810391747,-1.809605555,-1.805812962,-1.79929876,-1.790512066,-1.779932501,-1.767961144,-1.754848632,-1.740658114,-1.725258635,-1.708347857,-1.739326481,-1.769497609,-1.79813482,-1.824284257,-1.847525817,-1.867714541,-1.885096314,-1.899141092,-1.908988575,-1.914725189,-1.917037433,-1.916685607,-1.914316307,-1.910458301,-1.90556141,-1.899974803,-1.89393088,-1.887544735,-1.880826172,-1.873700448,-1.866028543,-1.857629508,-1.848288762,-1.837778372,-1.825869958,-1.812346372,-1.797001646,-1.779643609,-1.760094741,-1.737433385,-1.699440402,-1.661815408,-1.648318975,-1.661382212,-1.695736774,-1.74206348,-1.790349209,-1.832523612,-1.864088567,-1.884034039,-1.893795935,-1.896077249,-1.893725431,-1.888999019,-1.883297838,-1.877204733,-1.870692909,-1.863403913,-1.854918872,-1.844961317,-1.83350126,-1.82076238,-1.807154164,-1.793174544,-1.779309443,-1.765932352,-1.753209279,-1.74103252,-1.729036005,-1.724216006,-1.760794866,-1.793973618,-1.825803596,-1.859559524,-1.894208266,-1.928096895,-1.959563135,-1.987847701,-2.012715086,-2.034040404,-2.05175684,-2.065871041,-2.076397149,-2.083364784,-2.086840328,-2.086875949,-2.083481061,-2.076619346,-2.06623049,-2.052253039,-2.034650761,-2.013422551,-1.988623489,-1.960378488,-1.928874257,-1.894344807,-1.857052052,-1.81726877,-1.775274056,-1.730176842,-1.670369591,-1.611469384,-1.577170012,-1.5706785,-1.58808903,-1.621019771,-1.659765747,-1.695780325,-1.723525218,-1.74116655,-1.750034081,-1.752948194,-1.752746526,-1.751573198,-1.750586383,-1.750036665,-1.749546727,-1.748444921,-1.746057203,-1.74190437,-1.735786268,-1.72776146,-1.71806563,-1.707014165,-1.694912324,-1.681985214,-1.668329876,-1.653887529,-1.638439901,-1.621627278,-1.650558353,-1.680778039,-1.712899973,-1.744877959,-1.775481755,-1.803897152,-1.829628876,-1.852395448,-1.871672147,-1.8862842,-1.895966067,-1.901279479,-1.902865108,-1.901284484,-1.897039625,-1.890554922,-1.882168399,-1.872135549,-1.860638902,-1.847802785,-1.833704556,-1.818386418,-1.801863899,-1.784122304,-1.765128104,-1.744835569,-1.723189701,-1.700122491,-1.675560356,-1.649013018,-1.608062483,-1.567474256,-1.550967019,-1.561469454,-1.594196039,-1.640115183,-1.689378039,-1.733608761,-1.767659335,-1.789742436,-1.800672071,-1.802861269,-1.799219073,-1.792358311,-1.784191897,-1.775806368,-1.767526342,-1.759115237,-1.750046805,-1.739771735,-1.727914698,-1.714375903,-1.69934559,-1.683246454,-1.666636098,-1.650083501,-1.634040109,-1.618735215,-1.60410941,-1.597524123,-1.627948426,-1.656956733,-1.688712691,-1.724370634,-1.763256502,-1.803980353,-1.844827111,-1.884520191,-1.920873643,-1.952279287,-1.978562975,-1.999902576,-2.016504169,-2.028564204,-2.036293075,-2.03988141,-2.039484089,-2.035220064,-2.027186115,-2.015472125,-2.000172113,-1.981392631,-1.959269857,-1.933991493,-1.905788462,-1.874921527,-1.841666845,-1.80630487,-1.769112392,-1.728801803,-1.673330611,-1.618996639,-1.590051377,-1.589729755,-1.613941371,-1.653763432,-1.699280634,-1.741894275,-1.776243738,-1.800736676,-1.816897848
    };
float joint3_imit[SIZE] = {
    0.319510503,0.292596135,0.267420054,0.244752814,0.22519297,0.209156727,0.19687036,0.188376544,0.183551004,0.182125484,0.183721169,0.187881675,0.194100843,0.201844268,0.210572503,0.219767824,0.228958201,0.237736264,0.245772069,0.253816311,0.266556871,0.290125899,0.324921391,0.368126771,0.415473466,0.46283949,0.507475096,0.546975205,0.579394159,0.604468474,0.623269106,0.637436191,0.648572356,0.657970646,0.666528479,0.674668927,0.682316949,0.688991416,0.694001751,0.696676122,0.696541337,0.693417898,0.687429229,0.678958919,0.668565283,0.656866329,0.644417621,0.631614642,0.618609478,0.590991145,0.556710085,0.520731435,0.481733775,0.447078848,0.41320947,0.379465078,0.34520659,0.310921868,0.278106521,0.248379292,0.223161138,0.203569034,0.190309851,0.18361899,0.183277762,0.188669639,0.198856477,0.212681362,0.228876597,0.246174467,0.263406136,0.279580818,0.2939071,0.305821385,0.314970914,0.321193462,0.324624311,0.325588523,0.324681075,0.308183204,0.297729138,0.309981978,0.339476523,0.380466351,0.42607549,0.469341345,0.504891023,0.530491825,0.547064749,0.557388104,0.5643085,0.569634428,0.574150759,0.578276301,0.582518871,0.587392342,0.593126739,0.599543377,0.606186352,0.61255813,0.618283068,0.623143102,0.627051336,0.630030534,0.632202121,0.633739314,0.634771695,0.635268424,0.634921325,0.615445061,0.587171387,0.558551057,0.528569586,0.502256784,0.476593892,0.45067116,0.423997252,0.396217239,0.367882474,0.340149311,0.313998384,0.290245868,0.269503713,0.252138705,0.23828168,0.22785231,0.22059116,0.216101287,0.213893661,0.213437302,0.214205378,0.215704769,0.21749911,0.219210194,0.220526597,0.221208921,0.221091887,0.220079824,0.218237125,0.207297291,0.200197613,0.207801448,0.229934029,0.262067692,0.298114296,0.33277522,0.363435701,0.390520025,0.416038089,0.440471694,0.462754386,0.482232937,0.499086952,0.5141585,0.528542813,0.543140632,0.558391605,0.574242536,0.590275487,0.60588062,0.620404509,0.633258665,0.643993037,0.65234053,0.658213948,0.6616441,0.662687965,0.661344818,0.657477297,0.636057243,0.606534696,0.577029943,0.547635444,0.520848841,0.494468991,0.467682189,0.440064465,0.411283081,0.381069369,0.349851828,0.318737076,0.288875608,0.261288312,0.236810102,0.216067692,0.199466419,0.187185935,0.179191161,0.175254694,0.174987424,0.177881942,0.183353025,0.190769928,0.199492518,0.208896464,0.218405325,0.227514123,0.235808551,0.24297453,0.249917075,0.2611303,0.282721452,0.315085458,0.355529177,0.399990441,0.444564932,0.486581886,0.525081556,0.559099423,0.587228583,0.609001245,0.625158513,0.637161213,0.646623366,0.654878719,0.662698859,0.670221131,0.677072698,0.682612446,0.686187057,0.687320021,0.685806174,0.681718616,0.675366774,0.667217136,0.657787443,0.64753606,0.636772456,0.625576542,0.599441445,0.56648244,0.532502405,0.495956976,0.464057373,0.432978907,0.401869963,0.370268423,0.338377325,0.307371573,0.278757209,0.253852793,0.233719476,0.219064351,0.21018187,0.206965372,0.208954042,0.21539686,0.225335493,0.237699439,0.25139688,0.265402139,0.278818991,0.290914721,0.301141941,0.309130213,0.314674553,0.317726575,0.318496463,0.317491165,0.300296255,0.292294036,0.306442764,0.336738603,0.37752824,0.42179603,0.462669452,0.495473024,0.518754363,0.533962835,0.543993647,0.551484468,0.557941997,0.563920772,0.569688568,0.575624612,0.582117776,0.589303388,0.596971802,0.604698987,0.612044092,0.61867168,0.624371936,0.629043033,0.632686179,0.635402453,0.637342588,0.638608951,0.639144641,0.638631677,0.618880712,0.590306505,0.561117551,0.530363104,0.503071622,0.476353287,0.449308495,0.421436083,0.392361823,0.362630718,0.333432382,0.305796683,0.280598132,0.258508432,0.239952634,0.225113957,0.213954942,0.206246674,0.201608656,0.199553682,0.199539604,0.201015653,0.20345338,0.206372861,0.20934736,0.212017636,0.214097915,0.215380161,0.215731888,0.215182083,0.205573532,0.199622414,0.208060241,0.230713568,0.26315724,0.299395099,0.334130367,0.364729323,0.391669089,0.417376572,0.442850734,0.466864352,0.488152676,0.506415769,0.522298666,0.536929993,0.551359432,0.56619124,0.581496047,0.596924597,0.611892793,0.625752752,0.63792033,0.64795811,0.655617391,0.660828849,0.663635235,0.664100161,0.662226903,0.657878697,0.636239041,0.606584714,0.576963257,0.548004822,0.521976197,0.496547862,0.470834908,0.444408593,0.416942159,0.388174612,0.358437987,0.328755092,0.30026579,0.273967132,0.250670435,0.230979317,0.215278966,0.20373233,0.196291937,0.192722784,0.192634103,0.195518161,0.200795279,0.20785116,0.21606654,0.224842648,0.233631273,0.241957322,0.249435454,0.255777713,0.262204584,0.272947198,0.294212573,0.326549786,0.367258449,0.412250256,0.457467798,0.500016143,0.537910705,0.569490837,0.594121209,0.612469002,0.625969659,0.636224761,0.64463575,0.652221417,0.659493554,0.666433071,0.672600819,0.677351854,0.680068844,0.68033349,0.678006287,0.673223585,0.666349064,0.657891109,0.648398356,0.638346932,0.628048875,0.617575128,0.59170651,0.558860784,0.523365768,0.484691367,0.450917105,0.418099163,0.385147759,0.351598076,0.318014661,0.285888761,0.256736011,0.231866275,0.212290786,0.198635342,0.191088841,0.189427005,0.193068008,0.201145092,0.212600704,0.226284437,0.241050699,0.255842941,0.269769135,0.282111613,0.292349968,0.300148635,0.305341764,0.307955053,0.308240459,0.306787935,0.288469932,0.284087976,0.298688844,0.326025833,0.361778283,0.401259081,0.439733668,0.472868724,0.498298082,0.516271467,0.528775304,0.538087394,0.545836762,0.552915816,0.559900538,0.567353494,0.575743227,0.585234446,0.595617935,0.6064271,0.617117281,0.627188156,0.636224145,0.643915634,0.650089653,0.654721621,0.657892247,0.659684031,0.660060301,0.658747465,0.638553237,0.609599643,0.580737277,0.553322093,0.528948659,0.505428659,0.481740435,0.457395108,0.432021651,0.405320861,0.377830618,0.350633501,0.324641077,0.300620528,0.279155932,0.260642111,0.245288344,0.233128994,0.224043407,0.217783678,0.214005606,0.212308141,0.212266387,0.213453664,0.215455905,0.21788465,0.220391915,0.222681264,0.224514505,0.225714034,0.227480461,0.234037661,0.251313015,0.279760111,0.316673726,0.357930086,0.39955289,0.438859699,0.474828446,0.507739027,0.536824573,0.56062032,0.578920917,0.592717822,0.603583462,0.613018849,0.62198102,0.630729903,0.638959127,0.646069665,0.651443881,0.654631015,0.655428515,0.653882881,0.650239134,0.64486609,0.638163438,0.630467657,0.621978247,0.612713175,0.587488123,0.555114659,0.518475634,0.478181919,0.441159792,0.404674931,0.36758081,0.32940225,0.290858394,0.253574082,0.219103732,0.188838625,0.16391253,0.145106244,0.132788901,0.126926471,0.127118137,0.13265209,0.142579147,0.15580438,0.171176561,0.18757648,0.203988173,0.219544799,0.233543253,0.245466605,0.254980328,0.261918095,0.266310158,0.2685992,0.255953487,0.250570017,0.260639355,0.285280792,0.319844127,0.358611474,0.396943645,0.432315666,0.464420215,0.49282783,0.516582868,0.535577948,0.550520192,0.562584737,0.573132211,0.583460912,0.594524485,0.606735784,0.619950671,0.633615353,0.646976935,0.659265635,0.669816642,0.678146957,0.68399971,0.687335942,0.688271156,0.686967991,0.683520389,0.677810337,0.655123979,0.624426799,0.593838203,0.568027775,0.545071169,0.524515476,0.505649026,0.487277628,0.468590003,0.449265864,0.429121881
    };
float joint4_imit[SIZE] = {
    -1.801131142,-1.815142362,-1.825311396,-1.831197407,-1.832616966,-1.829555306,-1.822096375,-1.810379953,-1.794579619,-1.774869303,-1.75142406,-1.724442546,-1.694182712,-1.660969156,-1.625196917,-1.587335539,-1.547936369,-1.507636696,-1.467157337,-1.408237104,-1.349814244,-1.315393583,-1.308984483,-1.328690048,-1.368055569,-1.417992091,-1.469008012,-1.51274983,-1.543609681,-1.55995606,-1.563869496,-1.559938623,-1.553696826,-1.550184517,-1.552912302,-1.563325385,-1.580800718,-1.603111131,-1.627194803,-1.650002827,-1.669194592,-1.683521416,-1.692847854,-1.697876564,-1.699705929,-1.699367349,-1.697464822,-1.693990265,-1.688288226,-1.700979546,-1.720920433,-1.739926193,-1.758369878,-1.781395125,-1.806128219,-1.831990315,-1.858468837,-1.883828324,-1.905403461,-1.921271987,-1.930413215,-1.932446756,-1.927427127,-1.915596266,-1.897263524,-1.872776966,-1.842519329,-1.806920245,-1.766484128,-1.721801699,-1.673570328,-1.622587378,-1.56966746,-1.515718294,-1.461699148,-1.408598037,-1.357226273,-1.308178598,-1.261712211,-1.198514623,-1.140229296,-1.112646774,-1.119631152,-1.161232171,-1.231723303,-1.320166037,-1.41259865,-1.495642625,-1.559938663,-1.602003367,-1.623992698,-1.631988052,-1.63374984,-1.636630827,-1.645957776,-1.664065579,-1.690158119,-1.720981144,-1.752045814,-1.77897899,-1.798587757,-1.809388308,-1.81157026,-1.806533913,-1.796217532,-1.78242901,-1.766353408,-1.748328131,-1.72784084,-1.726254477,-1.732142731,-1.737770606,-1.744497153,-1.756696119,-1.771435231,-1.788172951,-1.806631479,-1.826525273,-1.845999967,-1.862632976,-1.8750085,-1.882438054,-1.884749096,-1.882038249,-1.874546773,-1.862602044,-1.846578368,-1.826873686,-1.803881252,-1.777973552,-1.74951359,-1.718874663,-1.686474323,-1.652736579,-1.61809954,-1.583019072,-1.547966633,-1.513430363,-1.479788461,-1.426646845,-1.376433234,-1.35283372,-1.360199687,-1.39590149,-1.452272574,-1.518876856,-1.585279325,-1.64347963,-1.689109273,-1.720796077,-1.739725385,-1.749334493,-1.754099624,-1.758182358,-1.764409579,-1.773794491,-1.785631454,-1.798027058,-1.808638024,-1.815373738,-1.816882907,-1.812742096,-1.80335982,-1.789685702,-1.772841825,-1.753784577,-1.733080163,-1.710828098,-1.686672317,-1.682093088,-1.685465231,-1.688854474,-1.694795515,-1.706568849,-1.721143283,-1.737951132,-1.756662564,-1.777012512,-1.798765407,-1.820506943,-1.840029945,-1.855789459,-1.866992846,-1.87327401,-1.874527257,-1.870808965,-1.862269308,-1.849111105,-1.831568705,-1.80987089,-1.784247326,-1.754956525,-1.722310419,-1.686699906,-1.64857694,-1.608470799,-1.566983123,-1.524788507,-1.482632732,-1.421660103,-1.361033397,-1.324600863,-1.31652193,-1.335020407,-1.373719636,-1.423552726,-1.475050368,-1.520479363,-1.554703485,-1.575668978,-1.584672998,-1.585566129,-1.58333043,-1.582663296,-1.586922115,-1.597567443,-1.614136514,-1.634668478,-1.656415392,-1.67662163,-1.693160274,-1.704884049,-1.711647226,-1.714060339,-1.71309508,-1.709670823,-1.704333216,-1.69709029,-1.687374711,-1.696122313,-1.712183865,-1.727624733,-1.742890758,-1.763234248,-1.785454804,-1.808904189,-1.833205189,-1.857144048,-1.878306013,-1.894531496,-1.904613588,-1.908040486,-1.90477251,-1.894995133,-1.878991422,-1.857103675,-1.829718044,-1.797266037,-1.76024141,-1.719205302,-1.674806581,-1.627755151,-1.578788839,-1.528725085,-1.478431874,-1.428809612,-1.380762751,-1.335008026,-1.291936429,-1.231066588,-1.176422845,-1.152354075,-1.162349759,-1.205888561,-1.276413881,-1.362420492,-1.450153685,-1.527142467,-1.58528835,-1.622253858,-1.640892952,-1.647441723,-1.649349262,-1.653344821,-1.664004458,-1.682978223,-1.709013966,-1.738722065,-1.767792254,-1.792246466,-1.809360076,-1.818056582,-1.818783345,-1.813019054,-1.802623257,-1.789224055,-1.773795164,-1.756494232,-1.736705929,-1.735807153,-1.742396351,-1.748627957,-1.755976238,-1.768798425,-1.784168698,-1.80153357,-1.820593787,-1.841092205,-1.861194931,-1.878466978,-1.891481191,-1.899541766,-1.902465368,-1.900336531,-1.89338275,-1.881915022,-1.866287892,-1.846877323,-1.824047507,-1.798144643,-1.769511081,-1.738502916,-1.705525126,-1.670994344,-1.635351732,-1.599060819,-1.562606419,-1.526501069,-1.491153226,-1.436127829,-1.383828663,-1.357814662,-1.362425502,-1.395195338,-1.448537202,-1.512149638,-1.57576102,-1.631528728,-1.675355008,-1.706136229,-1.724963988,-1.734896175,-1.7400266,-1.744251135,-1.750275009,-1.759118997,-1.77017844,-1.781706724,-1.791504694,-1.797585444,-1.798641827,-1.794234852,-1.784712927,-1.770943441,-1.75396763,-1.734680843,-1.713617211,-1.690872449,-1.666102961,-1.660703696,-1.663159486,-1.665623324,-1.670874235,-1.682011016,-1.695992081,-1.7122207,-1.730368364,-1.750178843,-1.77142857,-1.79288825,-1.812417125,-1.828347882,-1.839798812,-1.846346186,-1.847842843,-1.844318322,-1.835907762,-1.822809454,-1.80526368,-1.78352883,-1.757862077,-1.728541935,-1.695910563,-1.660386887,-1.622454222,-1.582669337,-1.541661274,-1.500131281,-1.458850754,-1.399465214,-1.340817343,-1.306434455,-1.300549612,-1.321521907,-1.36302044,-1.41590576,-1.470547697,-1.518599938,-1.554374606,-1.575913969,-1.584967174,-1.585884228,-1.584062368,-1.584475618,-1.590597801,-1.603843046,-1.623560837,-1.647512697,-1.672656292,-1.695997791,-1.715277188,-1.729331114,-1.738092369,-1.742299678,-1.743051426,-1.741351916,-1.737768729,-1.732269626,-1.724208976,-1.734587278,-1.752250248,-1.768522413,-1.784299352,-1.805002935,-1.827619692,-1.851372125,-1.875881516,-1.899337321,-1.919080464,-1.933323578,-1.941127521,-1.942154611,-1.936484261,-1.924374398,-1.906152422,-1.882186713,-1.85287947,-1.818674612,-1.780078964,-1.737666921,-1.692072898,-1.644023034,-1.594263795,-1.543620012,-1.492955838,-1.443156308,-1.3950515,-1.349282607,-1.306073594,-1.244404728,-1.191181035,-1.167524944,-1.176949774,-1.218917406,-1.287494236,-1.372023362,-1.459143682,-1.536334572,-1.595165872,-1.632811849,-1.651641688,-1.657531866,-1.657726811,-1.658886709,-1.66564363,-1.679825715,-1.700457443,-1.724464622,-1.747812124,-1.766692128,-1.778420305,-1.781848689,-1.777294947,-1.766115196,-1.750104986,-1.73091695,-1.709638898,-1.686607426,-1.661401098,-1.655276485,-1.656755935,-1.658207515,-1.662968754,-1.673025896,-1.685983652,-1.701242299,-1.718513707,-1.737589272,-1.758277266,-1.778860928,-1.796987401,-1.811299799,-1.821137045,-1.826240716,-1.826593103,-1.822327652,-1.813670298,-1.80090148,-1.784334524,-1.764274237,-1.741014213,-1.714860351,-1.68615753,-1.655289952,-1.622675995,-1.588769723,-1.554065974,-1.519104311,-1.484468327,-1.430746598,-1.37720055,-1.348405319,-1.348545724,-1.375578246,-1.422612656,-1.479989366,-1.537801306,-1.588250459,-1.6268539,-1.652157227,-1.665571734,-1.670942939,-1.673168006,-1.676738031,-1.684683921,-1.698093383,-1.716204728,-1.736946338,-1.757704713,-1.776080319,-1.790431434,-1.800102035,-1.805336341,-1.806965469,-1.805999308,-1.803250171,-1.799080579,-1.793315435,-1.785289293,-1.796309452,-1.814963588,-1.831414125,-1.847620084,-1.868510124,-1.891495084,-1.915717317,-1.940707236,-1.964416502,-1.984230463,-1.998643949,-2.006889823,-2.008744473,-2.004351383,-1.99399751,-1.978012867,-1.95673531,-1.930498956,-1.899642836,-1.864516173,-1.825492911,-1.78300289,-1.737572589,-1.689833553,-1.640464185,-1.590211452,-1.539865106,-1.490242883,-1.44210833,-1.395751771,-1.329847664,-1.269059062,-1.23497814,-1.232793163,-1.261396997,-1.314686068,-1.38304811,-1.455469488,-1.522000631,-1.575106727,-1.610845131,-1.629563616,-1.635056861,-1.632942391,-1.62893327,-1.627452363,-1.630809126,-1.639026074,-1.650247839,-1.661538064,-1.669795995,-1.672533789,-1.668339744,-1.65697564,-1.639164445,-1.616184621,-1.589414645,-1.559951764,-1.528381838,-1.494654615,-1.479659637,-1.472164637,-1.464635409,-1.463104544,-1.465614041,-1.471721527,-1.481091534,-1.493114146,-1.507350655,-1.523609922,-1.541759015
    };

void update_position() {
    int RotarycurrentAState = RotaryencoderA.read();
    int RotarycurrentBState = RotaryencoderB.read();
    position += (RotarycurrentAState == RotarycurrentBState) ? 1 : -1;
}
void handleEncoders() {
    angle1 = encoderA.getPulses() * PULSE_TO_RAD + angle1_init;
    velocity1 = encoderA.getVelocity() * PULSE_TO_RAD;
    angle2 = encoderB.getPulses() * PULSE_TO_RAD + angle2_init;
    velocity2 = encoderB.getVelocity() * PULSE_TO_RAD;
    angle3 = encoderC.getPulses() * PULSE_TO_RAD + angle3_init;
    velocity3 = encoderC.getVelocity() * PULSE_TO_RAD;
    angle4 = encoderD.getPulses() * PULSE_TO_RAD + angle4_init;
    velocity4 = encoderD.getVelocity() * PULSE_TO_RAD;
}
void CurrentLoop() {
    // This loop sets the motor voltage commands using PI current controllers with feedforward terms.
    
    //use the motor shield as follows:
    //motorShield.motorAWrite(DUTY CYCLE, DIRECTION), DIRECTION = 0 is forward, DIRECTION =1 is backwards.
        
    current1 = -(((float(motorShield.readCurrentA())/65536.0f)*30.0f)-15.0f);           // measure current
    velocity1 = encoderA.getVelocity() * PULSE_TO_RAD;                                  // measure velocity        
    float err_c1 = current_des1 - current1;                                             // current errror
    current_int1 += err_c1;                                                             // integrate error
    current_int1 = fmaxf( fminf(current_int1, current_int_max), -current_int_max);      // anti-windup
    float ff1 = R*current_des1 + k_t*velocity1;                                         // feedforward terms
    duty_cycle1 = (ff1 + current_Kp*err_c1 + current_Ki*current_int1)/supply_voltage;   // PI current controller
    
    float absDuty1 = abs(duty_cycle1);
    if (absDuty1 > duty_max) {
        duty_cycle1 *= duty_max / absDuty1;
        absDuty1 = duty_max;
    }    
    if (duty_cycle1 < 0) { // backwards
        motorShield.motorAWrite(absDuty1, 1);        
    } else { // forwards
        motorShield.motorAWrite(absDuty1, 0);
    }             
    prev_current_des1 = current_des1; 
    
    current2 = -(((float(motorShield.readCurrentB())/65536.0f)*30.0f)-15.0f);           // measure current
    velocity2 = encoderB.getVelocity() * PULSE_TO_RAD;                                  // measure velocity  
    float err_c2 = current_des2 - current2;                                             // current error
    current_int2 += err_c2;                                                             // integrate error
    current_int2 = fmaxf( fminf(current_int2, current_int_max), -current_int_max);      // anti-windup   
    float ff2 = R*current_des2 + k_t*velocity2;                                         // feedforward terms
    duty_cycle2 = (ff2 + current_Kp*err_c2 + current_Ki*current_int2)/supply_voltage;   // PI current controller
    
    float absDuty2 = abs(duty_cycle2);
    if (absDuty2 > duty_max) {
        duty_cycle2 *= duty_max / absDuty2;
        absDuty2 = duty_max;
    }    
    if (duty_cycle2 < 0) { // backwards
        motorShield.motorBWrite(absDuty2, 1);
    } else { // forwards
        motorShield.motorBWrite(absDuty2, 0);
    }             
    prev_current_des2 = current_des2; 
    

    current3 = -(((float(motorShield.readCurrentC())/65536.0f)*30.0f)-15.0f);           // measure current
    velocity3 = encoderC.getVelocity() * PULSE_TO_RAD;                                  // measure velocity        
    float err_c3 = current_des3 - current3;                                             // current errror 
    current_int3 += err_c3;                                                             // integrate error
    current_int3 = fmaxf( fminf(current_int3, current_int_max), -current_int_max);      // anti-windup
    float ff3 = R*current_des3 + k_t*velocity3;                                         // feedforward terms
    duty_cycle3 = (ff1 + current_Kp*err_c3 + current_Ki*current_int3)/supply_voltage;   // PI current controller
    
    float absDuty3 = abs(duty_cycle3);
    if (absDuty3 > duty_max) {
        duty_cycle3 *= duty_max / absDuty3;
        absDuty3 = duty_max;
    }    
    if (duty_cycle3 < 0) { // backwards
        motorShield.motorCWrite(absDuty3, 1);
    } else { // forwards
        motorShield.motorCWrite(absDuty3, 0);
    }             
    prev_current_des3 = current_des3; 
    
    current4 = -(((float(motorShield.readCurrentD())/65536.0f)*30.0f)-15.0f);           // measure current
    velocity4 = encoderD.getVelocity() * PULSE_TO_RAD;                                  // measure velocity  
    float err_c4 = current_des4 - current4;                                             // current error
    current_int4 += err_c4;                                                             // integrate error
    current_int4 = fmaxf( fminf(current_int4, current_int_max), -current_int_max);      // anti-windup   
    float ff4 = R*current_des4 + k_t*velocity4;                                         // feedforward terms
    duty_cycle4 = (ff4 + current_Kp*err_c4 + current_Ki*current_int4)/supply_voltage;   // PI current controller
    
    float absDuty4 = abs(duty_cycle4);
    if (absDuty4 > duty_max) {
        duty_cycle4 *= duty_max / absDuty4;
        absDuty4 = duty_max;
    }    
    if (duty_cycle4 < 0) { // backwards
        motorShield.motorDWrite(absDuty4, 1);
    } else { // forwards
        motorShield.motorDWrite(absDuty4, 0);
    }             
    prev_current_des4 = current_des4; 
}


int main(void) {
    

    // Rotary encoder interrupts
    interruptA.rise(&update_position);
    interruptA.fall(&update_position);

    // Setup experiment server with MATLAB
    server.attachTerminal(pc);
    server.init();
    BezierCurve rDesFoot_bez_front(2, BEZIER_ORDER_FOOT);
    BezierCurve rDesFoot_bez_rear(2, BEZIER_ORDER_FOOT);

    float input_params[NUM_INPUTS];

    while(1) {
        if (server.getParams(input_params, NUM_INPUTS)) {
            // Initialize parameters based on MATLAB inputs, similar to the second snippet
            start_period                = input_params[0];    // First buffer time, before trajectory
            traj_period                 = input_params[1];    // Trajectory time/length
            end_period                  = input_params[2];    // Second buffer time, after trajectory
            exper_period                = input_params[3];    // Second buffer time, after trajectory
            front_phase                 = input_params[4];    // Second buffer time, after trajectory
            rear_phase                  = input_params[5];    // Second buffer time, after trajectory
    
            angle1_init                 = input_params[6];    // Initial angle for q1 (rad)
            angle2_init                 = input_params[7];    // Initial angle for q2 (rad)

            K_xx                        = input_params[8];    // Foot stiffness N/m
            K_yy                        = input_params[9];    // Foot stiffness N/m
            K_xy                        = input_params[10];    // Foot stiffness N/m
            D_xx                        = input_params[11];    // Foot damping N/(m/s)
            D_yy                        = input_params[12];    // Foot damping N/(m/s)
            D_xy                        = input_params[13];   // Foot damping N/(m/s)
            duty_max                    = input_params[14];   // Maximum duty factor
          
            // Get foot trajectory points
            float foot_pts_rear[2*(BEZIER_ORDER_FOOT+1)];
            float foot_pts_front[2*(BEZIER_ORDER_FOOT+1)];
            float joint1_des_pts [NUM_Joint_Points];
            float joint2_des_pts [NUM_Joint_Points];
            float joint3_des_pts [NUM_Joint_Points];
            float joint4_des_pts [NUM_Joint_Points];
            for(int i = 0; i<2*(BEZIER_ORDER_FOOT+1);i++) {
              foot_pts_rear[i] = input_params[15+i];    
              foot_pts_front[i] = input_params[15+i+2*(BEZIER_ORDER_FOOT+1)];  
            }

            rDesFoot_bez_front.setPoints(foot_pts_front);
            rDesFoot_bez_rear.setPoints(foot_pts_rear);
            
            // Attach current loop interrupt
            currentLoop.attach_us(CurrentLoop,current_control_period_us);
            // Run experiment
            t.reset();
            t.start();
            encoderA.reset();
            encoderB.reset();
            encoderC.reset();
            encoderD.reset();
            
            // Joint Position Tracking
            if(start_period == 3){ 
                while (t.read() < start_period + exper_period + end_period) {
                    // Print rotary encoder angle
                    spinalangle = position * degrees_per_pulse;

                    // Handle encoder readings and motor control
                    // Calculate motor positions, velocities, apply impedance control, etc.
                    angle1 = encoderA.getPulses() *PULSE_TO_RAD + angle1_init;       
                    velocity1 = encoderA.getVelocity() * PULSE_TO_RAD;
                    
                    angle2 = encoderB.getPulses() * PULSE_TO_RAD + angle2_init;       
                    velocity2 = encoderB.getVelocity() * PULSE_TO_RAD;           

                    angle3 = encoderC.getPulses() *PULSE_TO_RAD + angle1_init;       
                    velocity3 = encoderC.getVelocity() * PULSE_TO_RAD;
                    
                    angle4 = encoderD.getPulses() * PULSE_TO_RAD + angle2_init;       
                    velocity4 = encoderD.getVelocity() * PULSE_TO_RAD; 
                    
                    const float th1 = angle1;
                    const float th2 = angle2;
                    const float dth1= velocity1;
                    const float dth2= velocity2;

                    const float th3 = angle3;
                    const float th4 = angle4;
                    const float dth3= velocity3;
                    const float dth4= velocity4;
    
                    // Calculate the Jacobian
                    float Jx_th1 = (l_OB+l_DE)*cos(th1)+l_AC*cos(th1+th2);
                    float Jx_th2 = l_AC*cos(th1+th2);
                    float Jy_th1 = (l_OB+l_DE)*sin(th1)+l_AC*sin(th1+th2);
                    float Jy_th2 = l_AC*sin(th1+th2);

                    float Jx_th3 = (l_OB+l_DE)*cos(th3)+l_AC*cos(th3+th4);
                    float Jx_th4 = l_AC*cos(th3+th4);
                    float Jy_th3 = (l_OB+l_DE)*sin(th3)+l_AC*sin(th3+th4);
                    float Jy_th4 = l_AC*sin(th3+th4);
                                    
                    // Calculate the forward kinematics (position and velocity)
                    float xFoot = (l_OB+l_DE)*sin(th1)+l_AC*sin(th1+th2);
                    float yFoot = -(l_OB+l_DE)*cos(th1)-l_AC*cos(th1+th2);
                    float dxFoot = Jx_th1*dth1+Jx_th2*dth2;
                    float dyFoot = Jy_th1*dth1+Jy_th2*dth2;  

                    float xFoot_r = (l_OB+l_DE)*sin(th3)+l_AC*sin(th3+th4);
                    float yFoot_r = -(l_OB+l_DE)*cos(th3)-l_AC*cos(th3+th4);
                    float dxFoot_r = Jx_th3*dth3+Jx_th4*dth4;
                    float dyFoot_r = Jy_th3*dth3+Jy_th4*dth4;      

                    // Set gains based on buffer and traj times, then calculate desired x,y from Bezier trajectory at current time if necessary
                    float teff  = 0;
                    float teff_front  = 0,teff_rear=0;
                    float vMult = 0;
                    if (t < start_period) {
                        if (K_xx > 0 || K_yy > 0) {
                            K_xx = 1; // for joint space control, set this to 1; for Cartesian space control, set this to 50
                            K_yy = 1; // for joint space control, set this to 1; for Cartesian space control, set this to 50
                            D_xx = 0.1;  // for joint space control, set this to 0.1; for Cartesian space control, set this to 2
                            D_yy = 0.1;  // for joint space control, set this to 0.1; for Cartesian space control, set this to 2
                            K_xy = 0;
                            D_xy = 0;
                        }
                        teff = 0;
                    }
                    else if (t < start_period + exper_period) {
                        
                        K_xx                        = input_params[8];    // Foot stiffness N/m
                        K_yy                        = input_params[9];    // Foot stiffness N/m
                        K_xy                        = input_params[10];    // Foot stiffness N/m
                        D_xx                        = input_params[11];    // Foot damping N/(m/s)
                        D_yy                        = input_params[12];    // Foot damping N/(m/s)
                        D_xy                        = input_params[13];   // Foot damping N/(m/s)

                        teff = (t-start_period);
                        teff_front=teff-front_phase;
                        teff_rear=teff-rear_phase;
                        while (teff_front>traj_period){
                            teff_front=teff_front-traj_period;
                        }
                        while (teff_rear>traj_period){
                            teff_rear=teff_rear-traj_period;
                        }
                        if(teff_front<0){
                            teff_front=0;
                        }
                        if(teff_rear<0){
                            teff_rear=0;
                        }
                        vMult = 1;
                    }
                    else {
                        teff = traj_period;
                        vMult = 0;
                    }


                    int time_index = int(teff_front/traj_period*SIZE);
                    // Get desired foot positions and velocities
                    float th1_des = joint1_imit[time_index];
                    float th2_des = joint2_imit[time_index];
                    float th3_des = joint3_imit[time_index];
                    float th4_des = joint4_imit[time_index];
                    float dth1_des = (joint1_imit[time_index]-joint1_imit[max(0,time_index-1)] )*1000;
                    float dth2_des = (joint2_imit[time_index]-joint2_imit[max(0,time_index-1)] )*1000;
                    float dth3_des = (joint3_imit[time_index]-joint3_imit[max(0,time_index-1)] )*1000;
                    float dth4_des = (joint4_imit[time_index]-joint4_imit[max(0,time_index-1)] )*1000;

                    
                    // current_des1 = -(-K_xx*(th1_des-th1)-D_xx*(dth1_des-dth1))/k_t;          
                    // current_des2 = -(-K_yy*(th2_des-th2)-D_yy*(dth2_des-dth2))/k_t;  

                    // current_des3 = -(-K_xx*(th3_des-th3)-D_xx*(dth3_des-dth3))/k_t;          
                    // current_des4 = -(-K_yy*(th4_des-th4)-D_yy*(dth4_des-dth4))/k_t;  

                    current_des1 = -(-K_xx*(th1_des-th1)-D_xx*(-dth1))/k_t;          
                    current_des2 = -(-K_yy*(th2_des-th2)-D_yy*(-dth2))/k_t;  

                    current_des3 = -(-K_xx*(th3_des-th3)-D_xx*(-dth3))/k_t;          
                    current_des4 = -(-K_yy*(th4_des-th4)-D_yy*(-dth4))/k_t;  
            
    
                    
                    
                    // Form output to send to MATLAB     
                    float output_data[NUM_OUTPUTS];
                    // current time
                    output_data[0] = t.read();
                    // motor 1 state
                    output_data[1] = angle1;
                    output_data[2] = velocity1;  
                    output_data[3] = current1;
                    output_data[4] = current_des1;
                    output_data[5] = duty_cycle1;
                    // motor 2 state
                    output_data[6] = angle2;
                    output_data[7] = velocity2;
                    output_data[8] = current2;
                    output_data[9] = current_des2;
                    output_data[10]= duty_cycle2;
                    // foot state
                    output_data[11] = xFoot;
                    output_data[12] = yFoot;
                    output_data[13] = dxFoot;
                    output_data[14] = dyFoot;
                    output_data[15] = joint1_imit[0];
                    output_data[16] = joint2_imit[0];
                    output_data[17] = joint3_imit[0];
                    output_data[18] = joint4_imit[0];

                    // motor 3 state
                    output_data[19] = angle3;
                    output_data[20] = velocity3;  
                    output_data[21] = current3;
                    output_data[22] = current_des3;
                    output_data[23] = duty_cycle3;
                    // motor 4 state
                    output_data[24] = angle4;
                    output_data[25] = velocity4;
                    output_data[26] = current4;
                    output_data[27] = current_des4;
                    output_data[28]= duty_cycle4;
                    // rear foot state
                    output_data[29] = xFoot_r;
                    output_data[30] = yFoot_r;
                    output_data[31] = dxFoot_r;
                    output_data[32] = dyFoot_r;
                    output_data[33] = 0;
                    output_data[34] = 0;
                    output_data[35] = 0;
                    output_data[36] = 0;
                    
                    output_data[37] = spinalangle;
                    // output_data[37] = joint1_imit[0];
                    
                    // Send data to MATLAB
                    server.sendData(output_data,NUM_OUTPUTS);


                    wait_us(impedance_control_period_us);
                }

                // Cleanup after experiment
                server.setExperimentComplete();
                currentLoop.detach();
                motorShield.motorAWrite(0, 0);
                motorShield.motorBWrite(0, 0);
                motorShield.motorCWrite(0, 0);
                motorShield.motorDWrite(0, 0);

            }
            // Foot Position tracking
            else{
                // Main experiment loop
                while (t.read() < start_period + exper_period + end_period) {

                    // Print rotary encoder angle
                    spinalangle = position * degrees_per_pulse;


                    // Handle encoder readings and motor control
                    // Calculate motor positions, velocities, apply impedance control, etc.
                    angle1 = encoderA.getPulses() *PULSE_TO_RAD + angle1_init;       
                    velocity1 = encoderA.getVelocity() * PULSE_TO_RAD;
                    
                    angle2 = encoderB.getPulses() * PULSE_TO_RAD + angle2_init;       
                    velocity2 = encoderB.getVelocity() * PULSE_TO_RAD;           

                    angle3 = encoderC.getPulses() *PULSE_TO_RAD + angle1_init;       
                    velocity3 = encoderC.getVelocity() * PULSE_TO_RAD;
                    
                    angle4 = encoderD.getPulses() * PULSE_TO_RAD + angle2_init;       
                    velocity4 = encoderD.getVelocity() * PULSE_TO_RAD; 
                    
                    const float th1 = angle1;
                    const float th2 = angle2;
                    const float dth1= velocity1;
                    const float dth2= velocity2;

                    const float th3 = angle3;
                    const float th4 = angle4;
                    const float dth3= velocity3;
                    const float dth4= velocity4;
    
                    // Calculate the Jacobian
                    float Jx_th1 = (l_OB+l_DE)*cos(th1)+l_AC*cos(th1+th2);
                    float Jx_th2 = l_AC*cos(th1+th2);
                    float Jy_th1 = (l_OB+l_DE)*sin(th1)+l_AC*sin(th1+th2);
                    float Jy_th2 = l_AC*sin(th1+th2);

                    float Jx_th3 = (l_OB+l_DE)*cos(th3)+l_AC*cos(th3+th4);
                    float Jx_th4 = l_AC*cos(th3+th4);
                    float Jy_th3 = (l_OB+l_DE)*sin(th3)+l_AC*sin(th3+th4);
                    float Jy_th4 = l_AC*sin(th3+th4);
                                    
                    // Calculate the forward kinematics (position and velocity)
                    float xFoot = (l_OB+l_DE)*sin(th1)+l_AC*sin(th1+th2);
                    float yFoot = -(l_OB+l_DE)*cos(th1)-l_AC*cos(th1+th2);
                    float dxFoot = Jx_th1*dth1+Jx_th2*dth2;
                    float dyFoot = Jy_th1*dth1+Jy_th2*dth2;  

                    float xFoot_r = (l_OB+l_DE)*sin(th3)+l_AC*sin(th3+th4);
                    float yFoot_r = -(l_OB+l_DE)*cos(th3)-l_AC*cos(th3+th4);
                    float dxFoot_r = Jx_th3*dth3+Jx_th4*dth4;
                    float dyFoot_r = Jy_th3*dth3+Jy_th4*dth4;      

                    // Set gains based on buffer and traj times, then calculate desired x,y from Bezier trajectory at current time if necessary
                    float teff  = 0;
                    float teff_front  = 0,teff_rear=0;
                    float vMult = 0;
                    if (t < start_period) {
                        if (K_xx > 0 || K_yy > 0) {
                            K_xx = 1; // for joint space control, set this to 1; for Cartesian space control, set this to 50
                            K_yy = 1; // for joint space control, set this to 1; for Cartesian space control, set this to 50
                            D_xx = 0.1;  // for joint space control, set this to 0.1; for Cartesian space control, set this to 2
                            D_yy = 0.1;  // for joint space control, set this to 0.1; for Cartesian space control, set this to 2
                            K_xy = 0;
                            D_xy = 0;
                        }
                        teff = 0;
                    }
                    else if (t < start_period + exper_period) {
                        
                        K_xx                        = input_params[8];    // Foot stiffness N/m
                        K_yy                        = input_params[9];    // Foot stiffness N/m
                        K_xy                        = input_params[10];    // Foot stiffness N/m
                        D_xx                        = input_params[11];    // Foot damping N/(m/s)
                        D_yy                        = input_params[12];    // Foot damping N/(m/s)
                        D_xy                        = input_params[13];   // Foot damping N/(m/s)

                        teff = (t-start_period);
                        teff_front=teff-front_phase;
                        teff_rear=teff-rear_phase;
                        while (teff_front>traj_period){
                            teff_front=teff_front-traj_period;
                        }
                        while (teff_rear>traj_period){
                            teff_rear=teff_rear-traj_period;
                        }
                        if(teff_front<0){
                            teff_front=0;
                        }
                        if(teff_rear<0){
                            teff_rear=0;
                        }
                        vMult = 1;
                    }
                    else {
                        teff = traj_period;
                        vMult = 0;
                    }
                    
                    // Get desired foot positions and velocities
                    float rDesFoot[2], vDesFoot[2];
                    rDesFoot_bez_front.evaluate(teff_front/traj_period,rDesFoot);
                    rDesFoot_bez_front.evaluateDerivative(teff_front/traj_period,vDesFoot);
                    vDesFoot[0]/=traj_period;
                    vDesFoot[1]/=traj_period;
                    vDesFoot[0]*=vMult;
                    vDesFoot[1]*=vMult;
                    
                    float rDesFoot_rear[2], vDesFoot_rear[2];
                    rDesFoot_bez_rear.evaluate(teff_rear/traj_period,rDesFoot_rear);
                    rDesFoot_bez_rear.evaluateDerivative(teff_rear/traj_period,vDesFoot_rear);

                    vDesFoot_rear[0]/=traj_period;
                    vDesFoot_rear[1]/=traj_period;
                    vDesFoot_rear[0]*=vMult;
                    vDesFoot_rear[1]*=vMult;
                    
                    // Calculate the inverse kinematics (joint positions and velocities) for desired joint angles              
                    float xFoot_inv = -rDesFoot[0];
                    float yFoot_inv = rDesFoot[1];                
                    float l_OE = sqrt( (pow(xFoot_inv,2) + pow(yFoot_inv,2)) );
                    float alpha = abs(acos( (pow(l_OE,2) - pow(l_AC,2) - pow((l_OB+l_DE),2))/(-2.0f*l_AC*(l_OB+l_DE)) ));
                    float th2_des = -(3.14159f - alpha); 
                    float th1_des = -((3.14159f/2.0f) + atan2(yFoot_inv,xFoot_inv) - abs(asin( (l_AC/l_OE)*sin(alpha) )));
                    
                    float xFoot_inv_rear = -rDesFoot_rear[0];
                    float yFoot_inv_rear = rDesFoot_rear[1];        
                    // float xFoot_inv_rear = -rDesFoot[0];
                    // float yFoot_inv_rear = rDesFoot[1];                
                    float l_OE_rear = sqrt( (pow(xFoot_inv_rear,2) + pow(yFoot_inv_rear,2)) );
                    float alpha_rear = abs(acos( (pow(l_OE_rear,2) - pow(l_AC,2) - pow((l_OB+l_DE),2))/(-2.0f*l_AC*(l_OB+l_DE)) ));
                    float th4_des = -(3.14159f - alpha_rear); 
                    float th3_des = -((3.14159f/2.0f) + atan2(yFoot_inv_rear,xFoot_inv_rear) - abs(asin( (l_AC/l_OE_rear)*sin(alpha_rear) )));
                    

                    float dd = (Jx_th1*Jy_th2 - Jx_th2*Jy_th1);
                    float dth1_des = (1.0f/dd) * (  Jy_th2*vDesFoot[0] - Jx_th2*vDesFoot[1] );
                    float dth2_des = (1.0f/dd) * ( -Jy_th1*vDesFoot[0] + Jx_th1*vDesFoot[1] );
            
                    
                    float dd_rear = (Jx_th3*Jy_th4 - Jx_th4*Jy_th3);
                    float dth3_des = (1.0f/dd_rear) * (  Jy_th4*vDesFoot_rear[0] - Jx_th4*vDesFoot_rear[1] );
                    float dth4_des = (1.0f/dd_rear) * ( -Jy_th3*vDesFoot_rear[0] + Jx_th3*vDesFoot_rear[1] );
                    // float dth3_des = (1.0f/dd_rear) * (  Jy_th4*vDesFoot[0] - Jx_th4*vDesFoot[1] );
                    // float dth4_des = (1.0f/dd_rear) * ( -Jy_th3*vDesFoot[0] + Jx_th3*vDesFoot[1] );
            

                    // Calculate error variables
                    float e_x = xFoot_inv - xFoot;
                    float e_y = yFoot_inv - yFoot;
                    float de_x = -vDesFoot[0]-dxFoot;
                    float de_y = vDesFoot[1]-dyFoot;
                    
                    float e_x_r = xFoot_inv_rear - xFoot_r;
                    float e_y_r = yFoot_inv_rear - yFoot_r;
                    // float de_x_r = -vDesFoot_rear[0]-dxFoot_r;
                    // float de_y_r = vDesFoot_rear[1]-dyFoot_r;
                    float de_x_r = -vDesFoot[0]-dxFoot_r;
                    float de_y_r = vDesFoot[1]-dyFoot_r;

                    // Calculate virtual force on foot
                    float fx = K_xx*e_x+K_xy*e_y+D_xx*de_x+D_xy*de_y;
                    float fy = K_xy*e_x+K_yy*e_y+D_xy*de_x+D_yy*de_y;

                    float fx_r = K_xx*e_x_r+K_xy*e_y_r+D_xx*de_x_r+D_xy*de_y_r;
                    float fy_r = K_xy*e_x_r+K_yy*e_y_r+D_xy*de_x_r+D_yy*de_y_r;
                                    
                    // Set desired currents             
                    // current_des1 = 0;          
                    // current_des2 = 0;  
                    float K1=1.0, D1= 0.05;
                    float K2=1.0, D2= 0.05; 
                    current_des1 = -(-K_xx*(th1_des-th1)-D_xx*(dth1_des-dth1))/k_t;          
                    current_des2 = -(-K_yy*(th2_des-th2)-D_yy*(dth2_des-dth2))/k_t;  

                    current_des3 = -(-K_xx*(th3_des-th3)-D_xx*(dth3_des-dth3))/k_t;          
                    current_des4 = -(-K_yy*(th4_des-th4)-D_yy*(dth4_des-dth4))/k_t;  
            
                    // Joint impedance
                    // sub Kxx for K1, Dxx for D1, Kyy for K2, Dyy for D2
                    // Note: Be careful with signs now that you have non-zero desired angles!
                    // Your equations should be of the form i_d = K1*(q1_d - q1) + D1*(dq1_d - dq1)
                //    current_des1 = 0;          
                //    current_des2 = 0;                          
                            
                    // Cartesian impedance  
                    // Note: As with the joint space laws, be careful with signs!              
                //    current_des1 = (Jx_th1*fx + Jy_th1*fy)/ k_t;          
                //    current_des2 = (Jx_th2*fx+Jy_th2*fy)/k_t;   
                    
                    
                    // Form output to send to MATLAB     
                    float output_data[NUM_OUTPUTS];
                    // current time
                    output_data[0] = t.read();
                    // motor 1 state
                    output_data[1] = angle1;
                    output_data[2] = velocity1;  
                    output_data[3] = current1;
                    output_data[4] = current_des1;
                    output_data[5] = duty_cycle1;
                    // motor 2 state
                    output_data[6] = angle2;
                    output_data[7] = velocity2;
                    output_data[8] = current2;
                    output_data[9] = current_des2;
                    output_data[10]= duty_cycle2;
                    // foot state
                    output_data[11] = xFoot;
                    output_data[12] = yFoot;
                    output_data[13] = dxFoot;
                    output_data[14] = dyFoot;
                    output_data[15] = rDesFoot[0];
                    output_data[16] = rDesFoot[1];
                    output_data[17] = vDesFoot[0];
                    output_data[18] = vDesFoot[1];

                    // motor 3 state
                    output_data[19] = angle3;
                    output_data[20] = velocity3;  
                    output_data[21] = current3;
                    output_data[22] = current_des3;
                    output_data[23] = duty_cycle3;
                    // motor 4 state
                    output_data[24] = angle4;
                    output_data[25] = velocity4;
                    output_data[26] = current4;
                    output_data[27] = current_des4;
                    output_data[28]= duty_cycle4;
                    // rear foot state
                    output_data[29] = xFoot_r;
                    output_data[30] = yFoot_r;
                    output_data[31] = dxFoot_r;
                    output_data[32] = dyFoot_r;
                    output_data[33] = rDesFoot_rear[0];
                    output_data[34] = rDesFoot_rear[1];
                    output_data[35] = vDesFoot_rear[0];
                    output_data[36] = vDesFoot_rear[1];
                    
                    output_data[37] = spinalangle;
                    
                    // Send data to MATLAB
                    server.sendData(output_data,NUM_OUTPUTS);


                    wait_us(impedance_control_period_us);
                }

                // Cleanup after experiment
                server.setExperimentComplete();
                currentLoop.detach();
                motorShield.motorAWrite(0, 0);
                motorShield.motorBWrite(0, 0);
                motorShield.motorCWrite(0, 0);
                motorShield.motorDWrite(0, 0);
            }
        }
    }
}

